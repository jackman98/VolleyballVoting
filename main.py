from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeAllPrivateChats, BotCommandScopeAllGroupChats
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, \
    filters, Application

from database import init_db, get_queue, add_player, \
    get_all_games, create_game, get_latest_game, get_players_for_game, save_chat, get_all_chats, get_game_by_id, \
    remove_game, move_from_queue, get_confirmed_players_for_game, get_declined_players_for_game
from help import help

import calendar_internal
from utils import safe_edit_message

NUMBER_OF_PLAYERS = int(12)
NEED_TO_NOTIFY = bool(0)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.message.chat if update.message else update.callback_query.message.chat

    if chat.type != "private":
        return

    keyboard = [
        [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≥—Ä—É", callback_data="start_game_creation")],
        [InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏", callback_data="list_games")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö —ñ–≥–æ—Ä
async def list_games_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    games = get_all_games()
    if not games:
        await query.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–≥–æ—Ä.")
        await start(update, context)
        return

    reply_message = "–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —ñ–≥–æ—Ä:\n\n"
    keyboard = []

    for game in games:
        game_id, date, time, location = game
        reply_message += f"–ì—Ä–∞: {game_id}\n–î–∞—Ç–∞: {date}\n–ß–∞—Å: {time}\n–ú—ñ—Å—Ü–µ: {location}\n\n"
        keyboard.append([InlineKeyboardButton(f"–ì—Ä–∞ {game_id}", callback_data=f"select_game:{game_id}")])

    reply_message += "–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É:\n\n"

    reply_markup = InlineKeyboardMarkup(keyboard)

    await safe_edit_message(query, reply_message, new_reply_markup=reply_markup)

async def select_game_handler(update, context):
    query = update.callback_query
    await query.answer()

    game_id = query.data.split(":")[1]

    message, _ = game_status(game_id, update)

    keyboard = [
        [InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É", callback_data=f"remove_game:{game_id}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É —ñ–≥–æ—Ä", callback_data="list_games")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await safe_edit_message(query, message, new_reply_markup=reply_markup)


async def start_game_creation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
    print("–ü—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–æ.")  # –î—Ä—É–∫ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    context.user_data["game_setup"] = {"chat_id": None, "chat_name": None, "date": None, "time": None, "location": None}
    context.user_data["state"] = "awaiting_chat"

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —á–∞—Ç–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    chat_list = get_all_chats()

    if not chat_list:
        await query.edit_message_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏.")
        return

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Ç—É
    keyboard = [
        [InlineKeyboardButton(chat["name"], callback_data=f"select_chat:{chat["id"]}|{chat["name"]}:")] for chat in chat_list
    ]
    keyboard.append([
        InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_game_creation")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —á–∞—Ç –¥–ª—è –≥—Ä–∏:", reply_markup=reply_markup)

async def select_chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    state = context.user_data.get("state")
    game_data = context.user_data.get("game_setup", None)

    if not game_data:
        return

    print(f"–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ: {game_data}")  # –î—Ä—É–∫ —É –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

    if state == "awaiting_chat" and query.data.startswith("select_chat"):
        data = query.data.split(":")[1]
        chat_id, chat_name = data.split("|")
        game_data["chat_id"] = int(chat_id)
        game_data["chat_name"] = chat_name
        context.user_data["state"] = "awaiting_date"
        calendar_markup = calendar_internal.create_calendar()
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≥—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2025-01-20):", reply_markup=calendar_markup)


# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
async def handle_game_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("state")
    game_data = context.user_data.get("game_setup", None)

    if not game_data:
        return

    print(f"–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ: {game_data}")  # –î—Ä—É–∫ —É –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

    if game_data["location"] is None:
        game_data["location"] = update.message.text
        print(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –º—ñ—Å—Ü–µ: {game_data['location']}")

        # –£—Å—ñ –¥–∞–Ω—ñ –∑—ñ–±—Ä–∞–Ω—ñ, –ø–æ–∫–∞–∑—É—î–º–æ —ó—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
        message = (
            f"–ì—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:\n"
            f"üìÖ –î–∞—Ç–∞: {game_data['date']}\n"
            f"‚è∞ –ß–∞—Å: {game_data['time']}\n"
            f"üìç –ú—ñ—Å—Ü–µ: {game_data['location']}\n\n"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        keyboard = [
            [
                InlineKeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="save_game"),
                InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_game_creation")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(message, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /save_game
async def save_game_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    game_data = context.user_data.get("game_setup", None)

    if not game_data or None in game_data.values():
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –í–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_game —Å–ø–æ—á–∞—Ç–∫—É.")
        return

    print(f"–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ: {game_data}")  # –î—Ä—É–∫ —É –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

    # –î–æ–¥–∞—î–º–æ –≥—Ä—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    create_game(game_data["chat_id"], game_data["date"], game_data["time"], game_data["location"])
    game = get_latest_game()

    # –°–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ
    context.user_data["game_setup"] = None

    for index, value in enumerate(game):
        print(f"–ï–ª–µ–º–µ–Ω—Ç {index}: {value}")

    message, reply_markup = game_status(game[0], update)

    await query.edit_message_text(message)

    sent_message = await context.bot.send_message(
        chat_id=game[1],
        text=message,
        reply_markup=reply_markup
    )
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await context.bot.pin_chat_message(chat_id=game[1], message_id=sent_message.message_id)
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

async def remove_game_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    game_id = query.data.split(":")[1]

    remove_game(game_id)

    await query.message.reply_text("–ì—Ä—É —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!")
    await list_games_handler(update, context)

async def cancel_game_creation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if "game_setup" in context.user_data:
        context.user_data["game_setup"] = None
        await query.edit_message_text("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        await query.edit_message_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

    await start(update, context)

async def vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    name = query.from_user.first_name
    user_id = query.from_user.id

    game_id = query.data.split(":")[1]

    confirmed_players = get_confirmed_players_for_game(game_id)

    player = next((player for player in confirmed_players if player[0] == user_id), None)

    if player:
        if NEED_TO_NOTIFY:
            await query.message.reply_text("–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –≥—Ä—É.")
    elif len(confirmed_players) < NUMBER_OF_PLAYERS:
        add_player(user_id, name, game_id, "confirmed")
        if NEED_TO_NOTIFY:
            await query.message.reply_text(f"{name}, –≤–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤!")
    elif user_id not in get_queue(game_id):
        add_player(user_id, name, game_id, "confirmed")
        if NEED_TO_NOTIFY:
            await query.message.reply_text(f"{name}, —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ–≤–Ω–∏–π. –í–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ —á–µ—Ä–≥–∏.")
    else:
        if NEED_TO_NOTIFY:
            await query.message.reply_text("–í–∏ –≤–∂–µ —É —á–µ—Ä–∑—ñ.")

# –í—ñ–¥–º—ñ–Ω–∞ —É—á–∞—Å—Ç—ñ
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    name = query.from_user.first_name
    user_id = query.from_user.id

    game_id = query.data.split(":")[1]

    players = get_players_for_game(game_id)

    player = next((player for player in players if player[0] == user_id), None)

    if player and player[2] == "confirmed":
        add_player(user_id, name, game_id, "declined")
        if NEED_TO_NOTIFY:
            await query.message.reply_text(f"{name}, –≤–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ —É—á–∞—Å—Ç—å —É –≥—Ä—ñ.")

        next_in_queue = move_from_queue(game_id)
        if next_in_queue:
            if NEED_TO_NOTIFY:
                await query.message.reply_text(f"{next_in_queue} –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –∑ —á–µ—Ä–≥–∏ –¥–æ —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
    elif user_id in get_queue(game_id):
        add_player(user_id, name, game_id, "declined")
        if NEED_TO_NOTIFY:
            await query.message.reply_text(f"{name}, –≤–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ —á–µ—Ä–≥–∏.")
    else:
        if NEED_TO_NOTIFY:
            await query.message.reply_text(f"{name}, –Ω–µ–º–∞—î, —â–æ —Å–∫–∞—Å–æ–≤—É–≤–∞—Ç–∏ :)")

async def vote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    game_id = query.data.split(":")[1]
    game = get_game_by_id(game_id)

    if not game:
        await query.message.reply_text("–¶—è –≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")

        return

    if query.data.startswith("vote_yes"):
        await vote(update, context)
    elif query.data.startswith("vote_no"):
        await cancel(update, context)

    message, reply_markup = game_status(game_id, update)
    await safe_edit_message(query, message, new_reply_markup = reply_markup)

def game_status(game_id, update: Update):
    game = get_game_by_id(game_id)
    if not game:
        return

    max_players = NUMBER_OF_PLAYERS

    confirmed = [player[1] for player in get_confirmed_players_for_game(game_id)]
    declined = [player[1] for player in get_declined_players_for_game(game_id)]

    # –§–æ—Ä–º—É—î–º–æ —á–µ—Ä–≥—É
    queue = confirmed[max_players:]  # –£—Å—ñ, —Ö—Ç–æ –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç
    confirmed = confirmed[:max_players]

    message = (
            f"üìÖ –î–∞—Ç–∞: {game[1]}\n"
            f"‚è∞ –ß–∞—Å: {game[2]}\n"
            f"üìç –ú—ñ—Å—Ü–µ: {game[3]}\n\n"
            f"‚úÖ –£—á–∞—Å–Ω–∏–∫–∏ ({len(confirmed)} / {max_players}):\n" +
            ("\n".join(f"- {name}" for name in confirmed) if confirmed else "–ù–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö") +
            "\n\n"
            f"‚ùå –í—ñ–¥–º–æ–≤–∏–ª–∏—Å—å ({len(declined)}):\n" +
            ("\n".join(f"- {name}" for name in declined) if declined else "–ù—ñ—Ö—Ç–æ –Ω–µ –≤—ñ–¥–º–æ–≤–∏–≤—Å—è") +
            "\n\n"
            f"üìã –ß–µ—Ä–≥–∞ ({len(queue)}):\n" +
            ("\n".join(f"- {name}" for name in queue) if queue else "–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è")
    )

    confirm_button = InlineKeyboardButton("–Ø –±—É–¥—É", callback_data=f"vote_yes:{game_id}")
    decline_button = InlineKeyboardButton("–Ø –Ω–µ –±—É–¥—É", callback_data=f"vote_no:{game_id}")

    keyboard = [
        [confirm_button],
        [decline_button]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    return message, reply_markup

async def game_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    game_id = query.data.split(":")[1]

    message, _ = game_status(game_id, update)

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É —ñ–≥–æ—Ä", callback_data="list_games")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, reply_markup=reply_markup)

async def track_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.message.chat
    save_chat(chat.id, chat.title)
    print(f"–ß–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ID={chat.id}, –ù–∞–∑–≤–∞={chat.title}")

async def set_bot_commands(application):
    chat_commands = [
        BotCommand("track_chat", "–°–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ —á–∞—Ç–æ–º")
    ]

    private_commands = [
        BotCommand("start", "–†–æ–∑–ø–æ—á–∞—Ç–∏")
    ]

    await application.bot.set_my_commands(chat_commands, scope=BotCommandScopeAllGroupChats())
    await application.bot.set_my_commands(private_commands, scope=BotCommandScopeAllPrivateChats())

if __name__ == "__main__":
    init_db()

    async def post_init(application: Application) -> None:
        await set_bot_commands(application)

    app = ApplicationBuilder().token("TOKEN").post_init(post_init).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("track_chat", track_chat))

    app.add_handler(CallbackQueryHandler(start_game_creation_handler, pattern="^start_game_creation$"))
    app.add_handler(CallbackQueryHandler(cancel_game_creation_handler, pattern="^cancel_game_creation$"))
    app.add_handler(CallbackQueryHandler(save_game_handler, pattern="^save_game$"))
    app.add_handler(CallbackQueryHandler(remove_game_handler, pattern="^remove_game:"))
    app.add_handler(CallbackQueryHandler(game_status_handler, pattern="^game_status:"))
    app.add_handler(CallbackQueryHandler(list_games_handler, pattern="^list_games$"))
    app.add_handler(CallbackQueryHandler(select_game_handler, pattern="^select_game:"))
    app.add_handler(CallbackQueryHandler(select_chat_handler, pattern="^select_chat:"))
    app.add_handler(CallbackQueryHandler(calendar_internal.date_selection_handler, pattern="^(day:|prev_month:|next_month:|ignore)"))
    app.add_handler(CallbackQueryHandler(calendar_internal.time_selection_handler, pattern="^(hour:|minute:|change_hour)"))
    app.add_handler(CallbackQueryHandler(vote_handler, pattern="^vote_yes:"))
    app.add_handler(CallbackQueryHandler(vote_handler, pattern="^vote_no:"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_game_input))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
